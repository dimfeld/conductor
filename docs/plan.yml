# yaml-language-server: $schema=../schema/project-plan-schema.json
plan:
  - id: 78
    title: Documentation Building
    description: Build documentation for the project
    plan_file: tasks/00078_epic_documentation_building.md
    stories:
      - id: 79
        title: Build Epic Documentation
        completed: true
      - id: 80
        title: Build Task Documentation
        completed: true
        plan_file: tasks/00080_task_build_task_documentation.md
      - id: 81
        title: Build Subtask Documentation
        completed: true
        plan_file: tasks/00081_task_build_subtask_documentation.md
  - id: 82
    title: Repo Scanner
    description: Generate documentation for existing repository code
    plan_file: tasks/00082_epic_repo_scanner.md
    stories:
      - id: 83
        title: Workspace awareness
        completed: false
        description: >-
          We need to be able to detect a workspace file, starting with
          Javascript workspace configurations such as pnpm-workspace.yaml. Once
          the file is detected, we should look through the filesystem to find
          all the packages matched by the workspace globs, and store the list of
          matched projects in the Project class. If we did not find a workspace
          configuration that's ok.
        plan_file: tasks/00083_task_workspace_awareness.md
      - id: 84
        title: Package Overview Document
        completed: false
      - id: 85
        title: Package internal interfaces
        completed: false
      - id: 86
        title: Package external interfaces
        completed: false
      - id: 87
        title: Code Conventions
        completed: false
      - id: 88
        title: >-
          Create changes document in each package that updates for each PR
          merged
        completed: false
      - id: 89
        title: Update package overview documents as well on each PR
        completed: false
      - id: 90
        title: >-
          Create single document that uses the overviews and interfaces
          documents from each package to describe where things happen
        completed: false
  - id: 1
    title: Agent Core Loop MVP
    description: >-
      Implement basic agent functionality with console interface and state
      management
    plan_file: tasks/00001_epic_agent_core_loop_mvp.md
    stories:
      - id: 2
        title: Core Infrastructure Setup
        completed: true
        description: Set up basic project structure with necessary dependencies
        testing: Verify project builds and dependencies are correctly configured
        subtasks:
          - id: 3
            title: Set up AI SDK integration
            completed: true
      - id: 4
        title: Project Configuration File
        completed: true
        description: Create a project configuration file format
        testing: Verify project configuration file is correctly parsed
        subtasks:
          - id: 5
            title: Create project plan YAML file format
            completed: true
          - id: 6
            title: Create project configuration file format in `docs/project.yml`
            completed: true
          - id: 7
            title: Configuration file includes a list of technologies used
            completed: true
      - id: 8
        title: Task Input System
        completed: false
        description: Implement console-based task input using inquirer
        testing: Verify task input is correctly captured and stored
        subtasks:
          - id: 9
            title: Create task input prompt interface
            completed: false
          - id: 10
            title: Implement task storage in database
            completed: false
          - id: 11
            title: Add input validation
            completed: false
          - id: 12
            title: Create commit after task creation
            completed: false
      - id: 13
        title: Task Planning System
        completed: false
        description: Integrate with aider to generate implementation plans
        testing: Verify plan generation and storage works correctly
        subtasks:
          - id: 14
            title: Set up aider integration
            completed: false
          - id: 15
            title: Implement plan generation logic
            completed: false
          - id: 16
            title: Create plan storage in markdown
            completed: false
          - id: 17
            title: Add commit step for plan creation
            completed: false
          - id: 18
            title: Store record of planning step in database
            completed: false
      - id: 19
        title: Interface Definition Step
        completed: false
        description: Create system to define and store interface types
        testing: Verify type definitions are generated correctly
        subtasks:
          - id: 20
            title: Create interface generation logic
            completed: false
          - id: 21
            title: Implement type definition storage
            completed: false
          - id: 22
            title: Add validation for generated types
            completed: false
          - id: 23
            title: Create commit step for interface definitions
            completed: false
          - id: 24
            title: Store record of interface step in database
            completed: false
      - id: 25
        title: Code Generation - Frontend
        completed: false
        description: Implement frontend code generation based on interface
        testing: Verify generated frontend code matches interface
        subtasks:
          - id: 26
            title: Create frontend code generation logic
            completed: false
          - id: 27
            title: Implement template system
            completed: false
          - id: 28
            title: Add type validation
            completed: false
          - id: 29
            title: Create commit step for frontend code
            completed: false
          - id: 30
            title: Store record of frontend generation step in database
            completed: false
      - id: 31
        title: Code Generation - Backend
        completed: false
        description: Implement backend code generation based on interface
        testing: Verify generated backend code matches interface
        subtasks:
          - id: 32
            title: Create backend code generation logic
            completed: false
          - id: 33
            title: Implement API endpoint generation
            completed: false
          - id: 34
            title: Add type validation
            completed: false
          - id: 35
            title: Create commit step for backend code
            completed: false
          - id: 36
            title: Store record of backend generation step in database
            completed: false
      - id: 37
        title: Type Checking System
        completed: false
        description: Implement automatic type checking and fixing
        testing: Verify type issues are detected and resolved
        subtasks:
          - id: 38
            title: Create type checking automation
            completed: false
          - id: 39
            title: Implement error detection
            completed: false
          - id: 40
            title: Add automatic fix generation
            completed: false
          - id: 41
            title: Create commit step for type fixes
            completed: false
          - id: 42
            title: Store record of type checking step in database
            completed: false
      - id: 43
        title: Test Generation System
        completed: false
        description: Create test generation and execution pipeline
        testing: Verify tests are generated and run correctly
        subtasks:
          - id: 44
            title: Implement test generation logic
            completed: false
          - id: 45
            title: Create test execution system
            completed: false
          - id: 46
            title: Add test result tracking
            completed: false
          - id: 47
            title: Create commit step for tests
            completed: false
          - id: 48
            title: Store test generation step in database
            completed: false
      - id: 49
        title: Test Running Loop
        completed: false
        description: Implement test execution and fix cycle
        testing: Verify test failures are addressed and fixed
        subtasks:
          - id: 50
            title: Create test execution loop
            completed: false
          - id: 51
            title: Implement fix generation
            completed: false
          - id: 52
            title: Add progress tracking
            completed: false
          - id: 53
            title: Create commit step for fixes
            completed: false
          - id: 54
            title: Store test running step in database
            completed: false
      - id: 55
        title: Code Formatting System
        completed: false
        description: Implement code formatting step
        testing: Verify code meets style guidelines
        subtasks:
          - id: 56
            title: Set up code formatter
            completed: false
          - id: 57
            title: Implement formatting automation
            completed: false
          - id: 58
            title: Add format verification
            completed: false
          - id: 59
            title: Create commit step for formatting
            completed: false
          - id: 60
            title: Store formatting step in database
            completed: false
      - id: 61
        title: Documentation Update System
        completed: false
        description: Implement documentation and lessons learned updates
        testing: Verify documentation is correctly updated
        subtasks:
          - id: 62
            title: Create documentation update logic
            completed: false
          - id: 63
            title: Implement lessons learned storage
            completed: false
          - id: 64
            title: Add documentation validation
            completed: false
          - id: 65
            title: Create commit step for documentation
            completed: false
          - id: 66
            title: Store documentation step in database
            completed: false
      - id: 67
        title: State Machine Integration
        completed: false
        description: Implement langgraph state machine for core loop
        testing: Verify state transitions work correctly
        subtasks:
          - id: 68
            title: Define state machine states
            completed: false
          - id: 69
            title: Implement state transitions
            completed: false
          - id: 70
            title: Add error handling
            completed: false
          - id: 71
            title: Create progress tracking
            completed: false
          - id: 72
            title: Store state machine logs in database
            completed: false
      - id: 73
        title: File Map System
        completed: false
        description: The file map lists information about every source file in the project
        testing: Verify file map is generated correctly
        subtasks:
          - id: 74
            title: Create file map generation logic
            completed: false
          - id: 75
            title: Use an LLM to get a one-line description of each file
            completed: false
          - id: 76
            title: Store the file map in a YAML file in docs/file_map.yml
            completed: false
          - id: 77
            title: Add file map validation
            completed: false
dependencies:
  - Core Infrastructure must be completed first
  - Task Input System must be completed before Planning System
  - Interface Definition must be completed before any code generation
  - >-
    Code Generation (both frontend and backend) must be completed before Type
    Checking
  - Test Generation must be completed before Test Running Loop
  - Formatting and Documentation systems can be implemented last
  - >-
    State Machine Integration should be implemented incrementally with each
    story
notes:
  - Each story should include database schema updates if needed
  - Every step must include proper error handling and logging
  - All commits should follow conventional commit format
  - Progress tracking should be detailed enough for debugging
